CREATE TABLE OLYM_DIM_ATHLETES AS 
SELECT  
    "ID" AS "ATHLETE_ID", 
    "ATHLETE_NAME", 
    "ATHLETE_GENDER" 
FROM OLYM."OLYM_ATHLETES";

CREATE TABLE OLYM_DIM_BASE_EVENTS AS 
SELECT  
    "ID" AS "BASE_EVENT_ID", 
    "DISCIPLINE_ID", 
    "EVENT" 
FROM OLYM."OLYM_BASE_EVENTS";

CREATE TABLE OLYM_DIM_DISCIPLINES AS 
SELECT  
    "ID" AS "DISCIPLINE_ID", 
    "SPORT_ID", 
    "DISCIPLINE" 
FROM OLYM."OLYM_DISCIPLINES";

CREATE TABLE OLYM_DIM_EVENTS AS 
SELECT  
    "ID" AS "EVENT_ID", 
    "BASE_EVENT_ID", 
    "EVENT_GENDER" 
FROM OLYM."OLYM_EVENTS";

CREATE TABLE OLYM_DIM_GAMES AS 
SELECT  
    "ID" AS "GAME_ID", 
    "YEAR", 
    "SEASON", 
    "CITY" 
FROM OLYM."OLYM_GAMES";

CREATE TABLE OLYM_DIM_NATIONS AS 
SELECT  
    "ID" AS "NATION_ID", 
    "NATION" 
FROM OLYM."OLYM_NATIONS";

CREATE TABLE OLYM_DIM_SPORTS AS 
SELECT  
    "ID" AS "SPORT_ID", 
    "SPORT" 
FROM OLYM."OLYM_SPORTS";

CREATE TABLE OLYM_MEASURES_ATHLETE_GAMES AS 
SELECT  
    "ID" AS "ATHLETE_GAME_ID", 
    "ATHLETE_ID", 
    "GAME_ID", 
    "NATION_ID" 
FROM OLYM."OLYM_ATHLETE_GAMES";

CREATE TABLE OLYM_MEASURES_MEDALS AS 
SELECT  
    "ID" AS "MEDAL_ID", 
    "EVENT_ID", 
    "ATHLETE_GAME_ID", 
    "MEDAL" 
FROM OLYM."OLYM_MEDALS";

CREATE TABLE OLYM_MEDALS_VIEW AS 
select  
    "CITY", 
    "SPORT", 
    "DISCIPLINE", 
    "EDITION", 
    "ATHLETE", 
    "NOC", 
    "GENDER", 
    "EVENT", 
    "EVENT_GENDER", 
    "MEDAL" 
from OLYM."OLYM_MEDALS_VIEW";

SELECT 
    "ATHLETE", 
    "SPORT", 
    "MEDAL", 
    COUNT(*) AS "Medal_Count" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY ROLLUP("ATHLETE", "MEDAL", "SPORT");

SELECT  
    "SPORT", 
    "MEDAL", 
    "GENDER", 
    COUNT(*) AS "MedalCount" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY CUBE ("SPORT", "MEDAL", "GENDER");

SELECT 
    DISTINCT "ATHLETE", 
    COUNT(*) OVER(PARTITION BY "ATHLETE") AS "Total_Medals_Won"    
    --calculated independently for each athlete. 
FROM OLYM."OLYM_MEDALS_VIEW" 
WHERE "MEDAL" IS NOT NULL 
ORDER BY "ATHLETE";

SELECT 
    "CITY" AS "City",  
    "SPORT" AS "Sport",  
    COUNT(*) AS "Total_Medals_Won"  
    -- Count the total number of medals won by the city in the sport. 
 
FROM OLYM."OLYM_MEDALS_VIEW" 
WHERE "MEDAL" IS NOT NULL  
GROUP BY "CITY", "SPORT"  
ORDER BY "City", "Sport";

SELECT 
    "SPORT", 
    "MEDAL", 
    COUNT(*) AS "Medal_Count",  
    -- Count the number of medals for each sport and medal type. 
    AVG(COUNT(*)) OVER(PARTITION BY "SPORT") AS "Average_Medals"  
    -- Calculate the average number of medals per sport. 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY ROLLUP("SPORT", "MEDAL") 
HAVING GROUPING_ID("SPORT") = 0;

SELECT 
    "SPORT", 
    "GENDER", 
    "MEDAL", 
    COUNT(*) AS "MedalCount", 
    (COUNT(*) / SUM(COUNT(*)) OVER()) * 100 AS "Percentage_Of_Total_Medals" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY CUBE ("SPORT", "GENDER", "MEDAL");

SELECT * FROM ( 
  SELECT "SPORT", "GENDER", "MEDAL", COUNT(*) as "MEDAL_COUNT" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "MEDAL" IS NOT NULL 
  GROUP BY "SPORT", "GENDER", "MEDAL" 
) 
MODEL 
  PARTITION BY ("SPORT", "GENDER") 
  DIMENSION BY ("MEDAL") 
  MEASURES ("MEDAL_COUNT", 0 AS "PREDICTED_MEDAL_COUNT") 
  IGNORE NAV 
  RULES UPSERT 
  ( 
    "PREDICTED_MEDAL_COUNT"['Gold'] = "MEDAL_COUNT"['Gold'] + 10, 
    "PREDICTED_MEDAL_COUNT"['Silver'] = "MEDAL_COUNT"['Silver'] + 5, 
    "PREDICTED_MEDAL_COUNT"['Bronze'] = "MEDAL_COUNT"['Bronze'] + 3 
    -- more will be added to here (if needed) 
  ) 
ORDER BY "SPORT", "GENDER", "MEDAL";

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
) 
MODEL 
  PARTITION BY ("EVENT", "SPORT") 
  DIMENSION BY ("EVENT_GENDER") 
  MEASURES ("SPORT_PARTICIPATED", 0 AS "PREDICTED_SPORT_PARTICIPATED") 
  IGNORE NAV 
  RULES UPSERT 
 
  ( 
    "PREDICTED_SPORT_PARTICIPATED"['W'] = "SPORT_PARTICIPATED"['W'] + 3, 
    "PREDICTED_SPORT_PARTICIPATED"['M'] = "SPORT_PARTICIPATED"['M'] + 5, 
    "PREDICTED_SPORT_PARTICIPATED"['X'] = "SPORT_PARTICIPATED"['X'] + 9 
    -- You can add more rules here if needed 
  ) 
ORDER BY "SPORT", "EVENT", "EVENT_GENDER";

SELECT 
    "ATHLETE", 
    "SPORT", 
    "MEDAL", 
    COUNT(*) AS "Medal_Count" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY ROLLUP("ATHLETE", "MEDAL", "SPORT");

SELECT  
    "SPORT", 
    "MEDAL", 
    "GENDER", 
    COUNT(*) AS "MedalCount" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY CUBE ("SPORT", "MEDAL", "GENDER");

SELECT 
    DISTINCT "ATHLETE", 
    COUNT(*) OVER(PARTITION BY "ATHLETE") AS "Total_Medals_Won"    
    --calculated independently for each athlete. 
FROM OLYM."OLYM_MEDALS_VIEW" 
WHERE "MEDAL" IS NOT NULL 
ORDER BY "ATHLETE";

SELECT 
    "CITY" AS "City",  
    "SPORT" AS "Sport",  
    COUNT(*) AS "Total_Medals_Won"  
    -- Count the total number of medals won by the city in the sport. 
 
FROM OLYM."OLYM_MEDALS_VIEW" 
WHERE "MEDAL" IS NOT NULL  
GROUP BY "CITY", "SPORT"  
ORDER BY "City", "Sport";

SELECT 
    "SPORT", 
    "MEDAL", 
    COUNT(*) AS "Medal_Count",  
    -- Count the number of medals for each sport and medal type. 
    AVG(COUNT(*)) OVER(PARTITION BY "SPORT") AS "Average_Medals"  
    -- Calculate the average number of medals per sport. 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY ROLLUP("SPORT", "MEDAL") 
HAVING GROUPING_ID("SPORT") = 0;

SELECT 
    "SPORT", 
    "GENDER", 
    "MEDAL", 
    COUNT(*) AS "MedalCount", 
    (COUNT(*) / SUM(COUNT(*)) OVER()) * 100 AS "Percentage_Of_Total_Medals" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY CUBE ("SPORT", "GENDER", "MEDAL");

SELECT * FROM ( 
  SELECT "SPORT", "GENDER", "MEDAL", COUNT(*) as "MEDAL_COUNT" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "MEDAL" IS NOT NULL 
  GROUP BY "SPORT", "GENDER", "MEDAL" 
);

SELECT * FROM ( 
  SELECT "SPORT", "GENDER", "MEDAL", COUNT(*) as "MEDAL_COUNT" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "MEDAL" IS NOT NULL 
  GROUP BY "SPORT", "GENDER", "MEDAL" 
) 
MODEL 
  PARTITION BY ("SPORT", "GENDER") 
  DIMENSION BY ("MEDAL") 
  MEASURES ("MEDAL_COUNT", 0 AS "PREDICTED_MEDAL_COUNT") 
  IGNORE NAV 
  RULES UPSERT 
  ( 
    "PREDICTED_MEDAL_COUNT"['Gold'] = "MEDAL_COUNT"['Gold'] + 10, 
    "PREDICTED_MEDAL_COUNT"['Silver'] = "MEDAL_COUNT"['Silver'] + 5, 
    "PREDICTED_MEDAL_COUNT"['Bronze'] = "MEDAL_COUNT"['Bronze'] + 3 
    -- more will be added to here (if needed) 
  ) 
ORDER BY "SPORT", "GENDER", "MEDAL";

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
);

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
);

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
) 
MODEL 
  PARTITION BY ("EVENT", "SPORT") 
  DIMENSION BY ("EVENT_GENDER") 
  MEASURES ("SPORT_PARTICIPATED", 0 AS "PREDICTED_SPORT_PARTICIPATED") 
  IGNORE NAV 
  RULES UPSERT 
 
  ( 
    "PREDICTED_SPORT_PARTICIPATED"['W'] = "SPORT_PARTICIPATED"['W'] + 3, 
    "PREDICTED_SPORT_PARTICIPATED"['M'] = "SPORT_PARTICIPATED"['M'] + 5, 
    "PREDICTED_SPORT_PARTICIPATED"['X'] = "SPORT_PARTICIPATED"['X'] + 9 
    -- You can add more rules here if needed 
  ) 
ORDER BY "SPORT", "EVENT", "EVENT_GENDER";

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
) 
MODEL 
  PARTITION BY ("EVENT", "SPORT") 
  DIMENSION BY ("EVENT_GENDER") 
  MEASURES ("SPORT_PARTICIPATED", 0 AS "PREDICTED_SPORT_PARTICIPATED") 
  IGNORE NAV 
  RULES UPSERT 
 
  ( 
    "PREDICTED_SPORT_PARTICIPATED"["W"] = "SPORT_PARTICIPATED"["W"] + 3, 
    "PREDICTED_SPORT_PARTICIPATED"['M'] = "SPORT_PARTICIPATED"['M'] + 5, 
    "PREDICTED_SPORT_PARTICIPATED"['X'] = "SPORT_PARTICIPATED"['X'] + 9 
    -- You can add more rules here if needed 
  ) 
ORDER BY "SPORT", "EVENT", "EVENT_GENDER";

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
) 
MODEL 
  PARTITION BY ("EVENT", "SPORT") 
  DIMENSION BY ("EVENT_GENDER") 
  MEASURES ("SPORT_PARTICIPATED", 0 AS "PREDICTED_SPORT_PARTICIPATED") 
  IGNORE NAV 
  RULES UPSERT 
 
  ( 
    "PREDICTED_SPORT_PARTICIPATED"["w"] = "SPORT_PARTICIPATED"["w"] + 3, 
    "PREDICTED_SPORT_PARTICIPATED"['M'] = "SPORT_PARTICIPATED"['M'] + 5, 
    "PREDICTED_SPORT_PARTICIPATED"['X'] = "SPORT_PARTICIPATED"['X'] + 9 
    -- You can add more rules here if needed 
  ) 
ORDER BY "SPORT", "EVENT", "EVENT_GENDER";

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
) 
MODEL 
  PARTITION BY ("EVENT", "SPORT") 
  DIMENSION BY ("EVENT_GENDER") 
  MEASURES ("SPORT_PARTICIPATED", 0 AS "PREDICTED_SPORT_PARTICIPATED") 
  IGNORE NAV 
  RULES UPSERT 
 
  ( 
    "PREDICTED_SPORT_PARTICIPATED"['W'] = "SPORT_PARTICIPATED"['W'] + 3, 
    "PREDICTED_SPORT_PARTICIPATED"['M'] = "SPORT_PARTICIPATED"['M'] + 5, 
    "PREDICTED_SPORT_PARTICIPATED"['X'] = "SPORT_PARTICIPATED"['X'] + 9 
    -- You can add more rules here if needed 
  ) 
ORDER BY "SPORT", "EVENT", "EVENT_GENDER";

CREATE TABLE OLYM_DIM_ATHLETES AS 
SELECT  
    "ID" AS "ATHLETE_ID", 
    "ATHLETE_NAME", 
    "ATHLETE_GENDER" 
FROM OLYM."OLYM_ATHLETES";

CREATE TABLE OLYM_DIM_BASE_EVENTS AS 
SELECT  
    "ID" AS "BASE_EVENT_ID", 
    "DISCIPLINE_ID", 
    "EVENT" 
FROM OLYM."OLYM_BASE_EVENTS";

CREATE TABLE OLYM_DIM_DISCIPLINES AS 
SELECT  
    "ID" AS "DISCIPLINE_ID", 
    "SPORT_ID", 
    "DISCIPLINE" 
FROM OLYM."OLYM_DISCIPLINES";

CREATE TABLE OLYM_DIM_EVENTS AS 
SELECT  
    "ID" AS "EVENT_ID", 
    "BASE_EVENT_ID", 
    "EVENT_GENDER" 
FROM OLYM."OLYM_EVENTS";

CREATE TABLE OLYM_DIM_GAMES AS 
SELECT  
    "ID" AS "GAME_ID", 
    "YEAR", 
    "SEASON", 
    "CITY" 
FROM OLYM."OLYM_GAMES";

CREATE TABLE OLYM_DIM_NATIONS AS 
SELECT  
    "ID" AS "NATION_ID", 
    "NATION" 
FROM OLYM."OLYM_NATIONS";

CREATE TABLE OLYM_DIM_SPORTS AS 
SELECT  
    "ID" AS "SPORT_ID", 
    "SPORT" 
FROM OLYM."OLYM_SPORTS";

CREATE TABLE OLYM_MEASURES_ATHLETE_GAMES AS 
SELECT  
    "ID" AS "ATHLETE_GAME_ID", 
    "ATHLETE_ID", 
    "GAME_ID", 
    "NATION_ID" 
FROM OLYM."OLYM_ATHLETE_GAMES";

CREATE TABLE OLYM_MEASURES_MEDALS AS 
SELECT  
    "ID" AS "MEDAL_ID", 
    "EVENT_ID", 
    "ATHLETE_GAME_ID", 
    "MEDAL" 
FROM OLYM."OLYM_MEDALS";

CREATE TABLE OLYM_MEDALS_VIEW AS 
select  
    "CITY", 
    "SPORT", 
    "DISCIPLINE", 
    "EDITION", 
    "ATHLETE", 
    "NOC", 
    "GENDER", 
    "EVENT", 
    "EVENT_GENDER", 
    "MEDAL" 
from OLYM."OLYM_MEDALS_VIEW";

SELECT 
    "ATHLETE", 
    "SPORT", 
    "MEDAL", 
    COUNT(*) AS "Medal_Count" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY ROLLUP("ATHLETE", "MEDAL", "SPORT");

SELECT  
    "SPORT", 
    "MEDAL", 
    "GENDER", 
    COUNT(*) AS "MedalCount" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY CUBE ("SPORT", "MEDAL", "GENDER");

SELECT 
    DISTINCT "ATHLETE", 
    COUNT(*) OVER(PARTITION BY "ATHLETE") AS "Total_Medals_Won"    
    --calculated independently for each athlete. 
FROM OLYM."OLYM_MEDALS_VIEW" 
WHERE "MEDAL" IS NOT NULL 
ORDER BY "ATHLETE";

SELECT 
    "CITY" AS "City",  
    "SPORT" AS "Sport",  
    COUNT(*) AS "Total_Medals_Won"  
    -- Count the total number of medals won by the city in the sport. 
 
FROM OLYM."OLYM_MEDALS_VIEW" 
WHERE "MEDAL" IS NOT NULL  
GROUP BY "CITY", "SPORT"  
ORDER BY "City", "Sport";

SELECT 
    "SPORT", 
    "MEDAL", 
    COUNT(*) AS "Medal_Count",  
    -- Count the number of medals for each sport and medal type. 
    AVG(COUNT(*)) OVER(PARTITION BY "SPORT") AS "Average_Medals"  
    -- Calculate the average number of medals per sport. 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY ROLLUP("SPORT", "MEDAL") 
HAVING GROUPING_ID("SPORT") = 0;

SELECT 
    "SPORT", 
    "GENDER", 
    "MEDAL", 
    COUNT(*) AS "MedalCount", 
    (COUNT(*) / SUM(COUNT(*)) OVER()) * 100 AS "Percentage_Of_Total_Medals" 
FROM OLYM."OLYM_MEDALS_VIEW" 
GROUP BY CUBE ("SPORT", "GENDER", "MEDAL");

SELECT * FROM ( 
  SELECT "SPORT", "GENDER", "MEDAL", COUNT(*) as "MEDAL_COUNT" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "MEDAL" IS NOT NULL 
  GROUP BY "SPORT", "GENDER", "MEDAL" 
) 
MODEL 
  PARTITION BY ("SPORT", "GENDER") 
  DIMENSION BY ("MEDAL") 
  MEASURES ("MEDAL_COUNT", 0 AS "PREDICTED_MEDAL_COUNT") 
  IGNORE NAV 
  RULES UPSERT 
  ( 
    "PREDICTED_MEDAL_COUNT"['Gold'] = "MEDAL_COUNT"['Gold'] + 10, 
    "PREDICTED_MEDAL_COUNT"['Silver'] = "MEDAL_COUNT"['Silver'] + 5, 
    "PREDICTED_MEDAL_COUNT"['Bronze'] = "MEDAL_COUNT"['Bronze'] + 3 
    -- more will be added to here (if needed) 
  ) 
ORDER BY "SPORT", "GENDER", "MEDAL";

SELECT * FROM ( 
  SELECT "EVENT", "SPORT","EVENT_GENDER", COUNT(*) as "SPORT_PARTICIPATED" 
  FROM OLYM."OLYM_MEDALS_VIEW" 
  WHERE "SPORT" IS NOT NULL 
  GROUP BY "EVENT", "SPORT", "EVENT_GENDER" 
) 
MODEL 
  PARTITION BY ("EVENT", "SPORT") 
  DIMENSION BY ("EVENT_GENDER") 
  MEASURES ("SPORT_PARTICIPATED", 0 AS "PREDICTED_SPORT_PARTICIPATED") 
  IGNORE NAV 
  RULES UPSERT 
 
  ( 
    "PREDICTED_SPORT_PARTICIPATED"['W'] = "SPORT_PARTICIPATED"['W'] + 3, 
    "PREDICTED_SPORT_PARTICIPATED"['M'] = "SPORT_PARTICIPATED"['M'] + 5, 
    "PREDICTED_SPORT_PARTICIPATED"['X'] = "SPORT_PARTICIPATED"['X'] + 9 
    -- You can add more rules here if needed 
  ) 
ORDER BY "SPORT", "EVENT", "EVENT_GENDER";

